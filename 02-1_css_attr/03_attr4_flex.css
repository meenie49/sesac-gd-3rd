body {
  margin: 0;
  padding: 0;
}

.container1 {
  /* 주축: main axis */
  /* 교차축: cross-axis */
  /* 중첩가능 */

  /* display: flex는 <자식 요소>의 정렬 방법을 지정하는 속성 */
  /* display: inline-flex; 속성도 있음 */
  /* flex와 inline-flex의 차이 */
  /* flex는 부모 요소가 수직으로 쌓임 -> block 요소 처럼 */
  /* inline-flex는 <부모 요소>가 수평으로 쌓임 -> inline 요소처럼 */

  /* display: flex;는 기본적으로 자식 요소들이 왼쪽에서 오른쪽으로 쌓임 */
  /* 즉, 주축의 기본 방향이 좌 -> 우 */

  display: flex;
  background-color: antiquewhite;
  flex-direction: column;
  width: 500px;
  height: 500px;
  align-content: center;

  /* 높이 지정안하면 부모요소를 꽉채움 */
  /* 높이는 지정안하면 안에 요소들의 크기에 맞춰서 변함 */
  /* height: 500px; */

  /* flex-wrap : flex 속성 사용시 컨테이너의 줄바꿈을 지정 */
  /* flex-wrap: no-wrap;(default) */
  /* wrap을 줄때 row정렬이면 width값을 지정, column정렬이면 height값을 지정 */
  /* flex-wrap: nowrap; */

  /* flex-wrap: wrap; */

  /* flex-direction : 주축의 방향 지정 */
  /* flex-direction : row; 가 default */
  /* 정렬이 아닌 시작점이 바뀌는 것 */

  /* row-reverse: 우 -> 좌로 자식 요소들이 쌓임 */
  /* flex-direction: row-reverse; */
  /* column-reverse: 아래 -> 위로 자식 요소들이 쌓임 */
  /* flex-direction: column-reverse; */

  /* justify-content: <주축> item의 정렬방법 / 배치방법 */
  /* 
   - justify-content: flex-start(default) -> 아이템을 start 지점을 기준으로 나열
   - justify-content: flex-end -> 아이템을 end 지점을 기준으로 나열
   - justify-content: space-around -> 아이템들의 모든 여백을 동일하게 갖도록 함(양끝 여백의 단위가 1이라면, item 사이 여백은 2
   - justify-content: space-evenly -> start부터 첫 아이템의 간격, 아이템 사이 간격, 마지막 아이템부터 end까지의 모든 간격이 동일
   - justify-content: space-between -> 처음과 마지막 아이템을 양끝에 붙이고, 나머지 아이템 사이 간격을 동일하게 나눔
   */
  /* justify-content: flex-end;
  justify-content: center;
  justify-content: space-around;
  justify-content: space-evenly;
  justify-content: space-between; */

  /* align-items: <교차축>에 대해 item을 어떻게 배치할 것인가 */
  /* 
  - align-items: stretch; (default) -> 교차축을 모두 채우기 위해 늘림
  -> item의 높이/너비가 지정되지 않았을 때 <자동으로 교차축을 채우기 위해 늘어남>
  - align-items: flex-start; -> 교차축의 시작점으로 정렬
  -> item의 높이/너비가 지정되었을 때 자동으로 정렬됨
  - align-items: flex-end; -> 교차축의 끝점으로 정렬
  - align-items: center -> 교차축의 중앙에 정렬
  - align-items: baseline; -> 아이템을 텍스트의 베이스라인 기준으로 정렬
  */

  /* align-content -> 두 줄 이상에서 <교차축> 기준으로 아이템들의 정렬 방식 */
  /* 조건: flex-wrap: wrap; 상태에서 아이템이 2줄 이상일 때 교차축 방향 설정 */
  /* 
  - align-content: stretch; -> 교차축 방향으로 모두 차지하기 위해 늘어남
  - align-content: flex-start; -> 교차축 방향으로 시작점으로 정렬
  - align-content: flex-end; -> 교차축 방향으로 끝점으로 정렬
  - align-content: center -> 교차축 방향으로 중앙 정렬
  */

  /* width: 350px;
  flex-wrap: wrap;
  align-content: center; */
}

.container2 {
  display: flex;
  background-color: lightcyan;
  /* flex-direction: row; */
  width: 500px;
  height: 500px;
  align-items: center;
}

.item {
  width: 100px;
  /* 아이템의 높이를 지정하지 않으면 교차축으로 늘어남 */
  height: 100px;
  font-size: 30px;
  /* line-height: 100px; */
  text-align: center;
}

.item1 {
  background-color: red;
}

.item2 {
  background-color: orange;
}

.item3 {
  background-color: yellow;
}

.item4 {
  background-color: aquamarine;
}

.item5 {
  background-color: palegreen;
}

.item6 {
  background-color: skyblue;
}

.item7 {
  background-color: blue;
}

.item8 {
  background-color: blueviolet;
}

/* 아이템 속성 */
.container3 {
  background-color: #dfdfdf;
  /* % 기준은 부모요소의 모든 넓이를 차지하겠다는 의미 */
  width: 100%;
  height: 400px;
  display: flex;
}

.container3 .itemitem {
  /* 너비가 늘어날수 있는데 작아지진 않음(최소값 지정) */
  /* stretch 속성은 교차축에만 있지 주축에서는 자동으로 늘어나지 않음 */
  /* flex-basis: 200px; */
  /* width: 50px; */
  height: 50px;
}

.container3 .item11 {
  background-color: lightcoral;
  /* order 설정값이 있는 요소에서만 순서 정렬 가능, order값이 큰 값이 뒤로감 */
  /* z-index는 요소들 끼리의 순서 , order은 요소 내부의 아이템간의 순서 */
  /* order 안 준 값들이 제일 우선시됨 */
  order: 5;
}
.container3 .item22 {
  background-color: lightsalmon;
  align-self: flex-start;
}
.container3 .item33 {
  background-color: lightyellow;
  /* flex-basis: 100px; */
}
.container3 .item44 {
  background-color: lightgreen;
  flex-grow: 1;
  order: 2;
}
.container3 .item55 {
  background-color: lightblue;
  order: 1;
  /* flex-grow는 grow 속성이 부여되지 않은 부분 제외하고 남은 부분에서 item55가 2/3, item44가 1/3 */
  flex-grow: 2;
}
